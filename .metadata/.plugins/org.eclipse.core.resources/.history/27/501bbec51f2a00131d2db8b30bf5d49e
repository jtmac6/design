package design;

import java.util.Collection;
import java.util.Iterator;


public class MainView {

	/** 
	 * @uml.property name="_mainController"
	 */
	private MainController _mainController = new design.MainController();

	/** 
	 * Getter of the property <tt>_mainController</tt>
	 * @return  Returns the _mainController.
	 * @uml.property  name="_mainController"
	 */
	public MainController get_mainController() {
		return _mainController;
	}

	/** 
	 * Setter of the property <tt>_mainController</tt>
	 * @param _mainController  The _mainController to set.
	 * @uml.property  name="_mainController"
	 */
	public void set_mainController(MainController _mainController) {
		this._mainController = _mainController;
	}

	/**
	 * @uml.property  name="mainController"
	 * @uml.associationEnd  multiplicity="(1 1)" inverse="mainView:design.MainController"
	 */
	private MainController mainController = new design.MainController();

	/**
	 * Getter of the property <tt>mainController</tt>
	 * @return  Returns the mainController.
	 * @uml.property  name="mainController"
	 */
	public MainController getMainController() {
		return mainController;
	}

	/**
	 * Setter of the property <tt>mainController</tt>
	 * @param mainController  The mainController to set.
	 * @uml.property  name="mainController"
	 */
	public void setMainController(MainController mainController) {
		this.mainController = mainController;
	}

	/**
	 * @uml.property  name="eventObj"
	 * @uml.associationEnd  multiplicity="(0 -1)" inverse="mainView:design.EventObj"
	 */
	private Collection eventObj;

	/**
	 * Getter of the property <tt>eventObj</tt>
	 * @return  Returns the eventObj.
	 * @uml.property  name="eventObj"
	 */
	public Collection getEventObj() {
		return eventObj;
	}

	/**
	 * Returns an iterator over the elements in this collection. 
	 * @return  an <tt>Iterator</tt> over the elements in this collection
	 * @see java.util.Collection#iterator()
	 * @uml.property  name="eventObj"
	 */
	public Iterator eventObjIterator() {
		return eventObj.iterator();
	}

	/**
	 * Returns <tt>true</tt> if this collection contains no elements.
	 * @return  <tt>true</tt> if this collection contains no elements
	 * @see java.util.Collection#isEmpty()
	 * @uml.property  name="eventObj"
	 */
	public boolean isEventObjEmpty() {
		return eventObj.isEmpty();
	}

	/**
	 * Returns <tt>true</tt> if this collection contains the specified element. 
	 * @param element  whose presence in this collection is to be tested.
	 * @see java.util.Collection#contains(Object)
	 * @uml.property  name="eventObj"
	 */
	public boolean containsEventObj(EventObj eventObj) {
		return this.eventObj.contains(eventObj);
	}

	/**
	 * Returns <tt>true</tt> if this collection contains all of the elements in the specified collection.
	 * @param elements  collection to be checked for containment in this collection.
	 * @see java.util.Collection#containsAll(Collection)
	 * @uml.property  name="eventObj"
	 */
	public boolean containsAllEventObj(Collection eventObj) {
		return this.eventObj.containsAll(eventObj);
	}

	/**
	 * Returns the number of elements in this collection.
	 * @return  the number of elements in this collection
	 * @see java.util.Collection#size()
	 * @uml.property  name="eventObj"
	 */
	public int eventObjSize() {
		return eventObj.size();
	}

	/**
	 * Returns all elements of this collection in an array.
	 * @return  an array containing all of the elements in this collection
	 * @see java.util.Collection#toArray()
	 * @uml.property  name="eventObj"
	 */
	public EventObj[] eventObjToArray() {
		return (EventObj[]) eventObj.toArray(new EventObj[eventObj.size()]);
	}

	/**
	 * Returns an array containing all of the elements in this collection;  the runtime type of the returned array is that of the specified array.
	 * @param a  the array into which the elements of this collection are to be stored.
	 * @return  an array containing all of the elements in this collection
	 * @see java.util.Collection#toArray(Object[])
	 * @uml.property  name="eventObj"
	 */
	public EventObj[] eventObjToArray(EventObj[] eventObj) {
		return (EventObj[]) this.eventObj.toArray(eventObj);
	}

	/**
	 * Ensures that this collection contains the specified element (optional operation). 
	 * @param element  whose presence in this collection is to be ensured.
	 * @see java.util.Collection#add(Object)
	 * @uml.property  name="eventObj"
	 */
	public boolean addEventObj(EventObj eventObj) {
		return this.eventObj.add(eventObj);
	}

	/**
	 * Setter of the property <tt>eventObj</tt>
	 * @param eventObj  the eventObj to set.
	 * @uml.property  name="eventObj"
	 */
	public void setEventObj(Collection eventObj) {
		this.eventObj = eventObj;
	}

	/**
	 * Removes a single instance of the specified element from this collection, if it is present (optional operation).
	 * @param element  to be removed from this collection, if present.
	 * @see java.util.Collection#add(Object)
	 * @uml.property  name="eventObj"
	 */
	public boolean removeEventObj(EventObj eventObj) {
		return this.eventObj.remove(eventObj);
	}

	/**
	 * Removes all of the elements from this collection (optional operation).
	 * @see java.util.Collection#clear()
	 * @uml.property  name="eventObj"
	 */
	public void clearEventObj() {
		this.eventObj.clear();
	}

}
