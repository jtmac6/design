package design;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;


public class MainView {

	/**
	 * @uml.property  name="_mainController"
	 * @uml.associationEnd  multiplicity="(1 1)" inverse="_mainView:design.MainController"
	 */
	private MainController _mainController = new design.MainController();

	/**
	 * Getter of the property <tt>_mainController</tt>
	 * @return  Returns the _mainController.
	 * @uml.property  name="_mainController"
	 */
	public MainController get_mainController() {
		return _mainController;
	}

	/**
	 * Setter of the property <tt>_mainController</tt>
	 * @param _mainController  The _mainController to set.
	 * @uml.property  name="_mainController"
	 */
	public void set_mainController(MainController _mainController) {
		this._mainController = _mainController;
	}

	/**
	 * @uml.property  name="_eventObj"
	 * @uml.associationEnd  multiplicity="(0 -1)" ordering="true" aggregation="composite" inverse="_mainView:design.EventObj"
	 */
	private ArrayList _eventObj = new java.util.ArrayList();

	/**
	 * Getter of the property <tt>_eventObj</tt>
	 * @return  Returns the _eventObj.
	 * @uml.property  name="_eventObj"
	 */
	public ArrayList get_eventObj() {
		return _eventObj;
	}

	/**
	 * Returns the element at the specified position in this list.
	 * @param index  index of element to return.
	 * @return  the element at the specified position in this list.
	 * @see java.util.List#get(int)
	 * @uml.property  name="_eventObj"
	 */
	public EventObj get_eventObj(int i) {
		return (EventObj) _eventObj.get(i);
	}

	/**
	 * Returns an iterator over the elements in this list in proper sequence.
	 * @return  an iterator over the elements in this list in proper sequence.
	 * @see java.util.List#iterator()
	 * @uml.property  name="_eventObj"
	 */
	public Iterator _eventObjIterator() {
		return _eventObj.iterator();
	}

	/**
	 * Returns <tt>true</tt> if this list contains no elements.
	 * @return  <tt>true</tt> if this list contains no elements.
	 * @see java.util.List#isEmpty()
	 * @uml.property  name="_eventObj"
	 */
	public boolean is_eventObjEmpty() {
		return _eventObj.isEmpty();
	}

	/**
	 * Returns <tt>true</tt> if this list contains the specified element.
	 * @param element  element whose presence in this list is to be tested.
	 * @return  <tt>true</tt> if this list contains the specified element.
	 * @see java.util.List#contains(Object)
	 * @uml.property  name="_eventObj"
	 */
	public boolean contains_eventObj(EventObj eventObj) {
		return _eventObj.contains(eventObj);
	}

	/**
	 * Returns <tt>true</tt> if this list contains all of the elements of the specified collection.
	 * @param elements  collection to be checked for containment in this list.
	 * @return  <tt>true</tt> if this list contains all of the elements of the specified collection.
	 * @see java.util.List#containsAll(Collection)
	 * @uml.property  name="_eventObj"
	 */
	public boolean containsAll_eventObj(Collection _eventObj) {
		return this._eventObj.containsAll(_eventObj);
	}

	/**
	 * Returns the number of elements in this list.
	 * @return  the number of elements in this list.
	 * @see java.util.List#size()
	 * @uml.property  name="_eventObj"
	 */
	public int _eventObjSize() {
		return _eventObj.size();
	}

	/**
	 * Returns an array containing all of the elements in this list in proper sequence.
	 * @return  an array containing all of the elements in this list in proper sequence.
	 * @see java.util.List#toArray()
	 * @uml.property  name="_eventObj"
	 */
	public EventObj[] _eventObjToArray() {
		return (EventObj[]) _eventObj.toArray(new EventObj[_eventObj.size()]);
	}

	/**
	 * Returns an array containing all of the elements in this list in proper sequence; the runtime type of the returned array is that of the specified array.
	 * @param a  the array into which the elements of this list are to be stored.
	 * @return  an array containing all of the elements in this list in proper sequence.
	 * @see java.util.List#toArray(Object[])
	 * @uml.property  name="_eventObj"
	 */
	public EventObj[] _eventObjToArray(EventObj[] _eventObj) {
		return (EventObj[]) this._eventObj.toArray(_eventObj);
	}

	/**
	 * Inserts the specified element at the specified position in this list (optional operation)
	 * @param index  index at which the specified element is to be inserted.
	 * @param element  element to be inserted.
	 * @see java.util.List#add(int,Object)
	 * @uml.property  name="_eventObj"
	 */
	public void add_eventObj(int index, EventObj eventObj) {
		_eventObj.add(index, eventObj);
	}

	/**
	 * Appends the specified element to the end of this list (optional operation).
	 * @param element  element to be appended to this list.
	 * @return  <tt>true</tt> (as per the general contract of the <tt>Collection.add</tt> method).
	 * @see java.util.List#add(Object)
	 * @uml.property  name="_eventObj"
	 */
	public boolean add_eventObj(EventObj eventObj) {
		return _eventObj.add(eventObj);
	}

	/**
	 * Removes the element at the specified position in this list (optional operation).
	 * @param index  the index of the element to removed.
	 * @return  the element previously at the specified position.
	 * @see java.util.List#remove(int)
	 * @uml.property  name="_eventObj"
	 */
	public Object remove_eventObj(int index) {
		return _eventObj.remove(index);
	}

	/**
	 * Removes the first occurrence in this list of the specified element  (optional operation).
	 * @param element  element to be removed from this list, if present.
	 * @return  <tt>true</tt> if this list contained the specified element.
	 * @see java.util.List#remove(Object)
	 * @uml.property  name="_eventObj"
	 */
	public boolean remove_eventObj(EventObj eventObj) {
		return _eventObj.remove(eventObj);
	}

	/**
	 * Removes all of the elements from this list (optional operation).
	 * @see java.util.List#clear()
	 * @uml.property  name="_eventObj"
	 */
	public void clear_eventObj() {
		_eventObj.clear();
	}

	/**
	 * Setter of the property <tt>_eventObj</tt>
	 * @param _eventObj  the _eventObj to set.
	 * @uml.property  name="_eventObj"
	 */
	public void set_eventObj(ArrayList _eventObj) {
		this._eventObj = _eventObj;
	}

	/**
	 * @uml.property  name="_imgWindow"
	 * @uml.associationEnd  multiplicity="(1 1)" aggregation="composite" inverse="mainView:design.WindowFactory"
	 */
	private WindowFactory _imgWindow = new design.Win1Fact();

	/**
	 * Getter of the property <tt>_imgWindow</tt>
	 * @return  Returns the _imgWindow.
	 * @uml.property  name="_imgWindow"
	 */
	public WindowFactory get_imgWindow() {
		return _imgWindow;
	}

	/**
	 * Setter of the property <tt>_imgWindow</tt>
	 * @param _imgWindow  The _imgWindow to set.
	 * @uml.property  name="_imgWindow"
	 */
	public void set_imgWindow(WindowFactory _imgWindow) {
		this._imgWindow = _imgWindow;
	}


}
